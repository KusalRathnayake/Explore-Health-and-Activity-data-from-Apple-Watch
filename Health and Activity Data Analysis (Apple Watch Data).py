#!/usr/bin/env python
# coding: utf-8

# # Explore Health and Activity data from Apple Watch
# 
# ### Objective of this study is to identify the distribution patterns of Average Heart Rate, Active Energy Burned, Step Count and Walking Speed over days of month and days of week.
# 
# ### The general outline of this notebook is as follows:
# 1. Import health data from xml files generated by apple watch
# 2. Explore the distribution of Average Heart Rate, Active Energy Burned, Step Count and Walking Speed over days of month and days of week.
# 3. Use several data visualization techniques using matplotlib and seaborn
# 4. Use libraries: Pandas, datetime, xml, matplotlib and seaborn
# 
# To download xml files of health and workout data, you should follow the steps below
# 1. Go to health app in iphone
# 2. Click on your profile image in the top right corner
# 3. Go to the bottom of the page and select, "Export All Health Data"
# 4. Airdrop or email the zip file into your laptop
# 5. unzip the file to see "export.xml" file

# In[ ]:


import xml.etree.ElementTree as ET
import pandas as pd
import datetime
import ipywidgets as widgets
import plotly.graph_objects as go
import numpy as np
import matplotlib as mpl
import matplotlib.pyplot as plt
import seaborn as sns


# In[2]:


# create element tree object to read xml file
tree = ET.parse('apple_health_export/export.xml') 

# Extract the attributes into columns. Create a list.
root = tree.getroot()
record_list = [x.attrib for x in root.iter('Record')]

# create DataFrame from a list of columns
data = pd.DataFrame(record_list)

# assign appropriate type to date columns
for col in ['creationDate', 'startDate', 'endDate']:
    data[col] = pd.to_datetime(data[col])
    
# check if the value is numeric.
data['value'] = pd.to_numeric(data['value'], errors='coerce')

# some records do not measure anything, just count occurences
# filling with 1.0 (= one time) makes it easier to aggregate
data['value'] = data['value'].fillna(1.0)

# shorter observation names: use vectorized replace function
data['type'] = data['type'].str.replace('HKQuantityTypeIdentifier', '')
data['type'] = data['type'].str.replace('HKCategoryTypeIdentifier', '')


# ### Heart Rate Data Analysis

# In[79]:


# Extract Heart Rate data from main dataset
HeartRateDF = data[data.type == 'HeartRate']

#Extract a dataset for June 2022
HR_June = HeartRateDF.loc[HeartRateDF["creationDate"].between("2022-06-01", "2022-06-30")]

# aggregate the heart rate data by day
HR_byDay = HR_June.groupby(HR_June.creationDate.dt.day)['value'].mean()

HR_byDay = pd.DataFrame(HR_byDay)
HR_byDay = HR_byDay.reset_index()


# In[80]:


# set figure size
plt.rcParams['figure.figsize']=(5,3)
plt.rcParams['figure.dpi']=150

# plot average heart rate by day for month of June
plt.plot(HR_byDay.creationDate,HR_byDay.value)
plt.xlabel('Days')
plt.ylabel('count/min')
plt.title('Average Heart rate by day in June 2022')


# In[156]:


# plot heart rate distribution plot in June
sns.distplot(HR_June['value'], color="skyblue")
plt.title("Heart Rate Distribution")
plt.xlabel("Count/min")
plt.show()


# In[82]:


# include day name column into the dataframe
HR_June["day_of_week"] = HR_June.creationDate.dt.weekday
days = {0: "Monday", 1: "Tuesday", 2: "Wednesday", 3: "Thursday", 4: "Friday", 
        5: "Saturday", 6: "Sunday"}
HR_June["day_name"] = HR_June["day_of_week"].apply(lambda x: days[x])


# In[151]:


HR_June['Date'] = HR_June.creationDate.dt.strftime('%Y-%m-%d')
HR_group_byday = HR_June.groupby(['Date']).mean('value')
HR_group_byday = HR_group_byday.reset_index()
HR_group_byday

days = {0: "Monday", 1: "Tuesday", 2: "Wednesday", 3: "Thursday", 4: "Friday", 
        5: "Saturday", 6: "Sunday"}
HR_group_byday["day_name"] = HR_group_byday["day_of_week"].apply(lambda x: days[x])


# In[97]:


# create a boxplot for Average heart rate
sns.boxplot(x = 'day_name', y = 'value', data = HR_group_byday, palette = 'Set1')
plt.title('Average Heart Rate by Day')
plt.xticks(rotation=45)
plt.xlabel("") 
plt.ylabel("Count/min")
plt.show()


# ### Active Energy Burned Data Analysis

# In[107]:


# Extract Active Energy Burned  data from main dataset
ActiveEDF = data[data.type == 'ActiveEnergyBurned']

#Extract a dataset for June 2022
AE_June = ActiveEDF.loc[ActiveEDF["creationDate"].between("2022-06-01", "2022-06-30")]

# aggregate the Active Energy Burned data by day
AE_byDay = AE_June.groupby(AE_June.creationDate.dt.day)['value'].sum()

AE_byDay = pd.DataFrame(AE_byDay)
AE_byDay = AE_byDay.reset_index()


# In[108]:


# set figure size
plt.rcParams['figure.figsize']=(5,3)
plt.rcParams['figure.dpi']=150

# plot active energy burned data by day for month of June
plt.plot(AE_byDay.creationDate,AE_byDay.value)
plt.xlabel('Days')
plt.ylabel('total calories')
plt.title('Active Energy burned by day in June 2022')


# In[109]:


# plot active energy burned data distribution plot in June
sns.distplot(AE_byDay['value'], color="skyblue")
plt.title("Active Energy Burned Distribution")
plt.xlabel("Total Calories")
plt.show()


# In[110]:


AE_June["day_of_week"] = AE_June.creationDate.dt.weekday
days = {0: "Monday", 1: "Tuesday", 2: "Wednesday", 3: "Thursday", 4: "Friday", 
        5: "Saturday", 6: "Sunday"}
AE_June["day_name"] = AE_June["day_of_week"].apply(lambda x: days[x])


# In[118]:


# include day name column into the dataframe
AE_June['Date'] = AE_June.creationDate.dt.strftime('%Y-%m-%d')
AE_group_byday = AE_June.groupby(['Date']).mean('value')
AE_group_byday = AE_group_byday.reset_index()

days = {0: "Monday", 1: "Tuesday", 2: "Wednesday", 3: "Thursday", 4: "Friday", 
        5: "Saturday", 6: "Sunday"}
AE_group_byday["day_name"] = AE_group_byday["day_of_week"].apply(lambda x: days[x])

day_df = pd.DataFrame(AE_group_byday.day_name)

AE_group_byday = AE_June.groupby(['Date']).sum('value')
AE_group_byday = AE_group_byday.reset_index()
AE_group_byday = pd.concat([AE_group_byday,day_df.day_name.rename('DayofWeek')],axis=1)


# In[122]:


# create a boxplot
sns.boxplot(x = 'DayofWeek', y = 'value', data = AE_group_byday, palette = 'Set1')
plt.title('Active Energy Burned by Day')
plt.xticks(rotation=45)
plt.xlabel("") 
plt.ylabel("Total Calories")
plt.show()


# ### Step Count Data Analysis

# In[123]:


# Extract Step Count data from main dataset
StepC_DF = data[data.type == 'StepCount']

#Extract a dataset for June 2022
SC_June = StepC_DF.loc[StepC_DF["creationDate"].between("2022-06-01", "2022-06-30")]

# aggregate the Active Energy Burned data by day
SC_byDay = SC_June.groupby(SC_June.creationDate.dt.day)['value'].sum()

SC_byDay = pd.DataFrame(SC_byDay)
SC_byDay = SC_byDay.reset_index()


# In[125]:


# set figure size
plt.rcParams['figure.figsize']=(5,3)
plt.rcParams['figure.dpi']=150

# plot active energy burned data by day for month of June
plt.plot(SC_byDay.creationDate,SC_byDay.value)
plt.xlabel('Days')
plt.ylabel('total steps')
plt.title('Step Count by day in June 2022')


# In[126]:


# plot step count distribution plot in June
sns.distplot(SC_byDay['value'], color="skyblue")
plt.title("Step Count Distribution")
plt.xlabel("Total Steps")
plt.show()


# In[127]:


SC_June["day_of_week"] = SC_June.creationDate.dt.weekday
days = {0: "Monday", 1: "Tuesday", 2: "Wednesday", 3: "Thursday", 4: "Friday", 
        5: "Saturday", 6: "Sunday"}
SC_June["day_name"] = SC_June["day_of_week"].apply(lambda x: days[x])


# In[135]:


SC_June['Date'] = SC_June.creationDate.dt.strftime('%Y-%m-%d')
SC_group_byday = SC_June.groupby(['Date']).mean('value')
SC_group_byday = SC_group_byday.reset_index()

days = {0: "Monday", 1: "Tuesday", 2: "Wednesday", 3: "Thursday", 4: "Friday", 
        5: "Saturday", 6: "Sunday"}
SC_group_byday["day_name"] = SC_group_byday["day_of_week"].apply(lambda x: days[x])

daysc_df = pd.DataFrame(SC_group_byday.day_name)


# In[138]:


SC_group_byday = SC_June.groupby(['Date']).sum('value')
SC_group_byday = SC_group_byday.reset_index()

SC_group_byday = pd.concat([SC_group_byday,daysc_df.day_name.rename('DayofWeek')],axis=1)
SC_group_byday


# In[139]:


# create a boxplot
sns.boxplot(x = 'DayofWeek', y = 'value', data = SC_group_byday, palette = 'Set1')
plt.title('Step Count by Day')
plt.xticks(rotation=45)
plt.xlabel("") 
plt.ylabel("Total Steps")
plt.show()


# ### Walking Speed Data Analysis

# In[140]:


# Extract Step Count data from main dataset
WalkS_DF = data[data.type == 'WalkingSpeed']

#Extract a dataset for June 2022
WS_June = WalkS_DF.loc[WalkS_DF["creationDate"].between("2022-06-01", "2022-06-30")]

# aggregate the Active Energy Burned data by day
WS_byDay = WS_June.groupby(WS_June.creationDate.dt.day)['value'].mean()

WS_byDay = pd.DataFrame(WS_byDay)
WS_byDay = WS_byDay.reset_index()


# In[145]:


# set figure size

plt.rcParams['figure.figsize']=(5,3)
plt.rcParams['figure.dpi']=150

# plot walking speed by day for month of June
plt.plot(WS_byDay.creationDate,WS_byDay.value)
plt.xlabel('Days')
plt.ylabel('Average speed (miles/hr)')
plt.title('Average Walking Speed by day in June 2022')


# In[147]:


# plot heart rate distribution plot in June
sns.distplot(WS_June['value'], color="skyblue")
plt.title("Walking Speed Distribution")
plt.xlabel("miles/hr")
plt.show()


# In[152]:


WS_June["day_of_week"] = WS_June.creationDate.dt.weekday
days = {0: "Monday", 1: "Tuesday", 2: "Wednesday", 3: "Thursday", 4: "Friday", 
        5: "Saturday", 6: "Sunday"}
WS_June["day_name"] = WS_June["day_of_week"].apply(lambda x: days[x])


# In[154]:


WS_June['Date'] = WS_June.creationDate.dt.strftime('%Y-%m-%d')
WS_group_byday = WS_June.groupby(['Date']).mean('value')
WS_group_byday = WS_group_byday.reset_index()
WS_group_byday

#HR_June["day_of_week"] = HR_June.creationDate.dt.weekday
days = {0: "Monday", 1: "Tuesday", 2: "Wednesday", 3: "Thursday", 4: "Friday", 
        5: "Saturday", 6: "Sunday"}
WS_group_byday["day_name"] = WS_group_byday["day_of_week"].apply(lambda x: days[x])


# In[155]:


# create a boxplot
sns.boxplot(x = 'day_name', y = 'value', data = WS_group_byday, palette = 'Set1')
plt.title('Average Walking Speed by Day')
plt.xticks(rotation=45)
plt.xlabel("") 
plt.ylabel("miles/hr")
plt.show()


# In[ ]:




